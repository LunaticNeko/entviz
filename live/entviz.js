// Generated by CoffeeScript 1.9.3
var data_links, data_switches, dataset, domain_colorscale, linkdata_wrapper, svg, svgH, svgW, switchdata_wrapper, xaxis, xscale, yaxis, yscale;

svgW = 800;

svgH = 600;

dataset = [[5, 20], [480, 90], [250, 50], [100, 33], [330, 95], [410, 12], [475, 44], [25, 67], [85, 21], [220, 88]];

data_switches = 0;

data_links = 0;

domain_colorscale = d3.scale.category20();

d3.csv("../data/switches.csv", function(d) {
  return switchdata_wrapper(d);
});

xscale = d3.scale.linear().domain([
  0, d3.max(dataset, function(d) {
    return d[0];
  })
]).range([30, svgW - 30]);

yscale = d3.scale.linear().domain([
  0, d3.max(dataset, function(d) {
    return d[1];
  })
]).range([svgH - 30, 30]);

xaxis = d3.svg.axis().scale(xscale).orient("bottom").ticks(10);

yaxis = d3.svg.axis().scale(yscale).orient("left");

switchdata_wrapper = function(switchdata) {
  return d3.csv("../data/links.csv", function(linkdata) {
    return linkdata_wrapper(switchdata, linkdata);
  });
};

svg = d3.select("body").append("svg").attr("width", svgW).attr("height", svgH);

linkdata_wrapper = function(switchdata, linkdata) {
  var domain, domain_to_groups, domains, dpid_to_index, force, forceLinks, forceNodes, i, j, k, l, len, len1, len2, len3, li, linkSelection, m, n, nodeSelection, s, si, src, tar;
  force = d3.layout.force().size([svgW, svgH]).linkDistance(80).charge(-2000).linkStrength(0.8).friction(0.8);
  dpid_to_index = {};
  domains = [];
  for (j = 0, len = switchdata.length; j < len; j++) {
    s = switchdata[j];
    if (domains.indexOf(s['domain']) === -1) {
      domains.push(s['domain']);
    }
  }
  console.log(domains);
  domain_to_groups = {};
  for (i = k = 0, len1 = domains.length; k < len1; i = ++k) {
    domain = domains[i];
    console.log(domain, i);
    domain_to_groups[domain] = i;
  }
  forceNodes = [];
  for (si = m = 0, len2 = switchdata.length; m < len2; si = ++m) {
    s = switchdata[si];
    dpid_to_index[s.dpid] = si;
    forceNodes[si] = {
      name: s['domain'] + " " + s['dpid'],
      group: domain_to_groups[s['domain']]
    };
  }
  forceLinks = [];
  for (li = n = 0, len3 = linkdata.length; n < len3; li = ++n) {
    l = linkdata[li];
    src = dpid_to_index[l['f-dpid']];
    tar = dpid_to_index[l['t-dpid']];
    forceLinks[li] = {
      source: src,
      target: tar,
      type: l['notes']
    };
  }
  console.log(domain_to_groups);
  console.log(forceNodes);
  console.log(forceLinks);
  force.links(forceLinks);
  linkSelection = svg.selectAll("line").data(forceLinks);
  linkSelection.enter().insert("line").attr("class", function(d) {
    return "link " + d.type;
  });
  force.nodes(forceNodes);
  nodeSelection = svg.selectAll("circle.node").data(forceNodes);
  nodeSelection.enter().append("circle").attr("r", 10).classed("node", true).style("fill", function(d) {
    return domain_colorscale(d.group);
  }).call(force.drag).append("title").text(function(d) {
    return d.name;
  });
  force.on("tick", function(e) {
    linkSelection.attr("x1", function(d) {
      return d.source.x;
    }).attr("y1", function(d) {
      return d.source.y;
    }).attr("x2", function(d) {
      return d.target.x;
    }).attr("y2", function(d) {
      return d.target.y;
    });
    return nodeSelection.attr("cx", function(d) {
      return d.x;
    }).attr("cy", function(d) {
      return d.y;
    });
  });
  return force.start();
};
