// Generated by CoffeeScript 1.9.3
var core_distance, core_strength, d3_default_link_distance, external_distance, external_strength, internal_distance, internal_strength, linkdata_wrapper, meta_charge, nodesizes, svg, svgH, svgW, switch_charge, switchdata_wrapper;

svgW = 900;

svgH = 700;

d3_default_link_distance = 80;

core_distance = 1;

internal_distance = 2;

external_distance = 50;

core_strength = 1;

internal_strength = 0.9;

external_strength = 0.3;

nodesizes = {
  'meta': 5,
  'switch': 10
};

switch_charge = -2300;

meta_charge = -1800;

switchdata_wrapper = function(switchdata) {
  return d3.csv("../data/links.csv", function(linkdata) {
    return linkdata_wrapper(switchdata, linkdata);
  });
};

d3.csv("../data/switches.csv", function(d) {
  return switchdata_wrapper(d);
});

svg = d3.select("body").append("svg").attr("width", svgW).attr("height", svgH);

linkdata_wrapper = function(switchdata, linkdata) {
  var d, di, domain_colorscale, domains, dpid_to_index, force, forceLinks, forceNodes, i, j, k, l, len, len1, len2, len3, len4, li, linkSelection, lit, litb, litc, litcols, lith, litr, m, n, nd, ni, nl, nodeSelection, ns, o, ref, s, samegroup, si, src, swt, swtb, swtc, swtcols, swth, swtr, tar;
  dpid_to_index = {};
  domains = [];
  ns = switchdata.length;
  nl = linkdata.length;
  for (i = 0, len = switchdata.length; i < len; i++) {
    s = switchdata[i];
    if (domains.indexOf(s['domain']) === -1) {
      domains.push(s['domain']);
    }
  }
  nd = domains.length;
  forceNodes = [];
  console.log(switchdata);
  for (si = j = 0, len1 = switchdata.length; j < len1; si = ++j) {
    s = switchdata[si];
    dpid_to_index[s.dpid] = si;
    forceNodes.push({
      dpid: s['dpid'],
      name: s['domain'] + " " + s['dpid'],
      group: domains.indexOf(s['domain']),
      type: 'switch',
      charge: switch_charge
    });
  }
  for (di = k = 0, len2 = domains.length; k < len2; di = ++k) {
    d = domains[di];
    forceNodes.push({
      dpid: "" + d,
      name: "" + d,
      group: domains.indexOf(d),
      type: 'meta',
      charge: meta_charge
    });
  }
  console.log('nodes', forceNodes);
  forceLinks = [];
  for (li = m = 0, len3 = linkdata.length; m < len3; li = ++m) {
    l = linkdata[li];
    src = dpid_to_index[l['f-dpid']];
    tar = dpid_to_index[l['t-dpid']];
    console.log(forceNodes[src], forceNodes[tar]);
    samegroup = forceNodes[src].group === forceNodes[tar].group;
    forceLinks.push({
      source: src,
      target: tar,
      type: l['notes'],
      length: samegroup ? internal_distance : external_distance,
      strength: samegroup ? internal_strength : external_strength
    });
  }
  ref = forceNodes.slice(0, ns);
  for (ni = o = 0, len4 = ref.length; o < len4; ni = ++o) {
    n = ref[ni];
    forceLinks.push({
      source: ni,
      target: n.group + ns,
      type: 'hidden',
      length: core_distance,
      strength: core_strength
    });
  }
  domain_colorscale = d3.scale.category20();
  force = d3.layout.force().size([svgW, svgH]).linkDistance(function(d) {
    console.log(d.source.dpid, d.target.dpid, d.source.weight, d.target.weight);
    return d.length;
  }).charge(function(d) {
    return d.weight * -500;
  }).linkStrength(0.7).friction(0.5).gravity(0.1);
  force.on("tick", function(e) {
    linkSelection.attr("x1", function(d) {
      return d.source.x;
    }).attr("y1", function(d) {
      return d.source.y;
    }).attr("x2", function(d) {
      return d.target.x;
    }).attr("y2", function(d) {
      return d.target.y;
    });
    return nodeSelection.attr("cx", function(d) {
      return d.x;
    }).attr("cy", function(d) {
      return d.y;
    });
  });
  force.nodes(forceNodes).links(forceLinks);
  linkSelection = svg.selectAll("line").data(forceLinks);
  linkSelection.enter().insert("line").attr("class", function(d) {
    return "link " + d.type;
  });
  nodeSelection = svg.selectAll("circle.node").data(forceNodes);
  nodeSelection.enter().append("circle").attr("r", function(d) {
    return nodesizes[d.type];
  }).attr("class", function(d) {
    return "node " + d.type;
  }).style("fill", function(d) {
    return domain_colorscale(d.group);
  }).call(force.drag).append("title").text(function(d) {
    return d.name;
  });
  console.log(forceNodes);
  console.log(forceLinks);
  swt = d3.select("body").append("table");
  swth = swt.append("thead");
  swtb = swt.append("tbody");
  swtcols = ['dpid', 'group', 'name', 'type'];
  swth.append("tr").selectAll("th").data(swtcols).enter().append("th").text(function(d) {
    return d;
  });
  swtr = swtb.selectAll("tr").data(forceNodes).enter().append("tr");
  swtc = swtr.selectAll("td").data(function(r) {
    return swtcols.map(function(col) {
      return {
        col: col,
        value: r[col]
      };
    });
  }).enter().append("td").text(function(d) {
    return d.value;
  });
  lit = d3.select("body").append("table");
  lith = lit.append("thead");
  litb = lit.append("tbody");
  litcols = ['length', 'source', 'target', 'type'];
  lith.append("tr").selectAll("th").data(litcols).enter().append("th").text(function(d) {
    return d;
  });
  litr = litb.selectAll("tr").data(forceLinks).enter().append("tr");
  litc = litr.selectAll("td").data(function(r) {
    return litcols.map(function(col) {
      return {
        col: col,
        value: r[col]
      };
    });
  }).enter().append("td").text(function(d) {
    return d.value;
  });
  return force.start();
};
